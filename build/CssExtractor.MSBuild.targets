<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <UsingTask TaskName="CssExtractorTask"
    AssemblyFile="$(MSBuildThisFileDirectory)../tools/net8.0/CssExtractor.MSBuild.dll" />

  <!-- Custom task to read and merge patterns without MSBuild corruption -->
  <UsingTask TaskName="MergeCssExtractorPatterns" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)/Microsoft.Build.Tasks.Core.dll">
    <ParameterGroup>
      <BasePatterns ParameterType="System.String" Required="true" />
      <PatternFiles ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="false" />
      <AdditionalPatterns ParameterType="System.String" Required="false" />
      <CustomPatterns ParameterType="System.String" Required="false" />
      <MergedPatterns ParameterType="System.String" Output="true" />
    </ParameterGroup>
    <Task>
      <Code Type="Fragment" Language="cs">
        <![CDATA[
          var allPatterns = new List<string>();
          
          // Add base patterns
          if (!string.IsNullOrWhiteSpace(BasePatterns))
          {
              allPatterns.AddRange(BasePatterns.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries)
                                                .Select(p => p.Trim())
                                                .Where(p => !string.IsNullOrWhiteSpace(p)));
          }
          
          // Read patterns from files
          if (PatternFiles != null)
          {
              foreach (var file in PatternFiles)
              {
                  var filePath = file.ItemSpec;
                  if (System.IO.File.Exists(filePath))
                  {
                      var filePatterns = System.IO.File.ReadAllLines(filePath)
                                                      .Select(line => line.Trim())
                                                      .Where(line => !string.IsNullOrWhiteSpace(line));
                      allPatterns.AddRange(filePatterns);
                  }
              }
          }
          
          // Add additional patterns
          if (!string.IsNullOrWhiteSpace(AdditionalPatterns))
          {
              allPatterns.AddRange(AdditionalPatterns.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries)
                                                    .Select(p => p.Trim())
                                                    .Where(p => !string.IsNullOrWhiteSpace(p)));
          }
          
          // Add custom patterns
          if (!string.IsNullOrWhiteSpace(CustomPatterns))
          {
              allPatterns.AddRange(CustomPatterns.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries)
                                                .Select(p => p.Trim())
                                                .Where(p => !string.IsNullOrWhiteSpace(p)));
          }
          
          // Join with semicolon - this stays within the task and isn't processed by MSBuild
          MergedPatterns = string.Join(";", allPatterns);
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <!-- Default patterns for common CSS class extraction scenarios -->
  <PropertyGroup>
    <CssExtractorBasePatterns>
      class\s*=\s*"([^"@]+)";
      class\s*=\s*'([^'@]+)';
      class\s*:\s*"([^"@]+)";
      class\s*:\s*'([^'@]+)';
      className\s*[=:]\s*["']([^"@]+)["'];
      class\s*=\s*"([^"]*?)"\s*(?:[^>]*>|$);
      class\s*=\s*'([^']*?)'\s*(?:[^>]*>|$);
      "([a-zA-Z][\w-]*(?:\s+[a-zA-Z][\w-]*)*)"(?=\s*[+@}]);
      '([a-zA-Z][\w-]*(?:\s+[a-zA-Z][\w-]*)*)'(?=\s*[+@}])
    </CssExtractorBasePatterns>
  </PropertyGroup>

  <!-- Default output file location - smart defaults for common scenarios -->
  <PropertyGroup>
    <!-- Default to content/ subdirectory for library projects, root for applications -->
    <CssExtractorOutputFile Condition="'$(CssExtractorOutputFile)' == '' and '$(GeneratePackageOnBuild)' == 'true'">$(MSBuildProjectDirectory)/content/extracted-css-classes.txt</CssExtractorOutputFile>
    <CssExtractorOutputFile Condition="'$(CssExtractorOutputFile)' == '' and '$(IsPackable)' == 'true'">$(MSBuildProjectDirectory)/content/extracted-css-classes.txt</CssExtractorOutputFile>
    <CssExtractorOutputFile Condition="'$(CssExtractorOutputFile)' == '' and '$(OutputType)' == 'Library'">$(MSBuildProjectDirectory)/content/extracted-css-classes.txt</CssExtractorOutputFile>
    <CssExtractorOutputFile Condition="'$(CssExtractorOutputFile)' == ''">$(MSBuildProjectDirectory)/extracted-css-classes.txt</CssExtractorOutputFile>
  </PropertyGroup>

  <!-- Default file patterns -->
  <ItemGroup>
    <!-- Common exclude patterns -->
    <CssExtractorExcludeFiles Include="**/bin/**" />
    <CssExtractorExcludeFiles Include="**/obj/**" />
    <CssExtractorExcludeFiles Include="**/.git/**" />
    <CssExtractorExcludeFiles Include="**/node_modules/**" />
    <CssExtractorExcludeFiles Include="**/.vs/**" />
    <CssExtractorExcludeFiles Include="**/docs/**" />
    
    <!-- Common include patterns -->
    <CssExtractorIncludeFiles Include="**/*.cshtml" />
    <CssExtractorIncludeFiles Include="**/*.razor" />
    <CssExtractorIncludeFiles Include="**/*.html" />
    <CssExtractorIncludeFiles Include="**/*.cs" />
  </ItemGroup>

  <!-- Target to merge base patterns with custom patterns -->
  <Target Name="PrepareCssExtractorPatterns" BeforeTargets="ExtractCssClasses">
    <!-- Discover CSS extractor pattern files from referenced packages -->
    <ItemGroup>
      <_CssExtractorPatternFiles Include="$(MSBuildProjectDirectory)/**/content/css-extractor-patterns.txt" />
      <_CssExtractorPatternFiles Include="$(NuGetPackageRoot)**/content/css-extractor-patterns.txt" />
      <_CssExtractorPatternFiles Include="$(NUGET_PACKAGES)**/content/css-extractor-patterns.txt" />
      <!-- Also check in the packages folder for older NuGet setups -->
      <_CssExtractorPatternFiles Include="$(MSBuildProjectDirectory)/packages/**/content/css-extractor-patterns.txt" />
    </ItemGroup>

    <!-- Merge all patterns using the custom task -->
    <MergeCssExtractorPatterns
      BasePatterns="$(CssExtractorBasePatterns)"
      PatternFiles="@(_CssExtractorPatternFiles)"
      AdditionalPatterns="$(AdditionalCssExtractorPatterns)"
      CustomPatterns="$(CssExtractorCustomPatterns)">
      <Output TaskParameter="MergedPatterns" PropertyName="CssExtractorPatterns" />
    </MergeCssExtractorPatterns>
    
    <!-- Debug output -->
    <Message Text="CssExtractor: Found pattern files: @(_CssExtractorPatternFiles)" Importance="normal" Condition="'@(_CssExtractorPatternFiles)' != ''" />
    <Message Text="CssExtractor: Found patterns: $(CssExtractorPatterns)" Importance="normal" />
  </Target>


  <!-- Main extraction target -->
  <Target Name="ExtractCssClasses" BeforeTargets="AssignTargetPaths" 
          Inputs="@(CssExtractorIncludeFiles)" 
          Outputs="$(CssExtractorOutputFile)"
          DependsOnTargets="PrepareCssExtractorPatterns">
    <CssExtractorTask
      CssExtractorOutputFile="$(CssExtractorOutputFile)"
      CssExtractorExcludeFiles="@(CssExtractorExcludeFiles)"
      CssExtractorPatterns="$(CssExtractorPatterns)"
      CssExtractorIncludeFiles="@(CssExtractorIncludeFiles)" />
  </Target>

  <!-- Auto-include extracted CSS file as content for packable projects -->
  <ItemGroup Condition="'$(IsPackable)' == 'true' and Exists('$(CssExtractorOutputFile)')">
    <Content Include="$(CssExtractorOutputFile)">
      <Pack>true</Pack>
      <PackagePath>content/extracted-css-classes.txt</PackagePath>
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
  </ItemGroup>
  
  <!-- For projects that generate packages, also include as content -->
  <ItemGroup Condition="'$(GeneratePackageOnBuild)' == 'true' and Exists('$(CssExtractorOutputFile)')">
    <Content Include="$(CssExtractorOutputFile)">
      <Pack>true</Pack>
      <PackagePath>content/extracted-css-classes.txt</PackagePath>
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </Content>
  </ItemGroup>
</Project>
